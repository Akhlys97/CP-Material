ru! defaults.vim                " Use Enhanced Vim defaults
set mouse=a                    " Reset the mouse setting from defaults
aug vimStartup | au! | aug END  " Revert last positioned jump, as it is defined below
let g:skip_defaults_vim = 1     " Do not source defaults.vim again (after loading this system vimrc)
set encoding=utf-8
set ai                          " set auto-indenting on for programming
set showmatch                   " automatically show matching brackets. works like it does in bbedit.
set vb                          " turn on the "visual bell" - which is much quieter than the "audio blink"
set showmode                    " show the current mode
set clipboard=unnamed           " set clipboard to unnamed to access the system clipboard under windows
set wildmode=list:longest,longest:full   " Better command line completion

" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Set UTF-8 as the default encoding for commit messages
    autocmd BufReadPre COMMIT_EDITMSG,MERGE_MSG,git-rebase-todo setlocal fileencoding=utf-8

    " Remember the positions in files with some git-specific exceptions"
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$")
      \           && &filetype !~# 'commit\|gitrebase'
      \           && expand("%") !~ "ADD_EDIT.patch"
      \           && expand("%") !~ "addp-hunk-edit.diff" |
      \   exe "normal! g`\"" |
      \ endif

      autocmd BufNewFile,BufRead *.patch set filetype=diff

      autocmd Filetype diff
      \ highlight WhiteSpaceEOL ctermbg=red |
      \ match WhiteSpaceEOL /\(^+.*\)\@<=\s\+$/
endif 

syntax on

set clipboard=unnamed
set clipboard^=unnamedplus
set relativenumber
set nu
set backspace=2
set laststatus=2
set autoread

colorscheme elford

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-commentary'
Plug 'bfrg/vim-cpp-modern'
Plug 'vim-syntastic/syntastic'
Plug 'kshenoy/vim-signature'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()
nnoremap <C-p> :Files<CR>

command! Vimrc call VimrcOpen()
function! VimrcOpen()
	tabedit ~/_vimrc
endfunction

:set autoindent
:set tabstop=3
:set shiftwidth=3
:set smarttab
:set softtabstop=3
"Fold the files as manual"
set foldmethod=manual

"Mapping the key"
"Mapping the Leader key to ',' key
let mapleader = ","

"To toggle the NerdTree"
nnoremap <Leader>f :NERDTreeToggle<CR>
"To reload the vimrc file
nnoremap <Leader>s :source %<CR>
"Closed the tab"
nnoremap <C-j> :vertical ter<CR>
nnoremap <C-k> :q <CR>
"chance to Go to normal mode and Save the file"
inoremap <C-l> <esc>l
nnoremap <C-l> :w <CR>
"open the new tab in norman mode"
nnoremap <C-n> :tabnew <CR>

map <Leader>j <esc>:tabprevious <CR>
map <Leader>k <esc>:tabnext <CR>
nnoremap <leader>h :set hlsearch!<CR>
inoremap <C-Enter> <esc>o
inoremap <C-backspace> <esc>"_dbi
map <C-Up> :m-2<CR>
map <C-Down> :m+1<CR>

" indent the block of hightlight left or right
vnoremap < <gv
vnoremap > >gv

"---- Create template for C++ language ----"
autocmd BufNewFile *.cpp 0r ~/Desktop/CP/CPSetup/Main_Boiler_Template.cpp

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on

" Load an indent file for the detected file type.
filetype indent on

set smartindent         " even better autoindent (e.g. add indent after '{')

" No backup file
set nobackup
set nowritebackup
 
"nnoremap <silent> <C-f> :!~/vimfiles/clang-format.exe -i  -style=file --fallback-style=Microsoft *.cpp <CR>

"This is for not copy direct the delete"
nnoremap d "_d

autocmd VimEnter * cd ~/Desktop/CP/

